/*
{
    "expected_output": [
        "Yotam Tanay is performing Hobby(Piano)",
        "Successfully performed Piano",
        "Yotam Tanay is performing Hobby(Running)",
        "Successfully performed Running",
        "Yotam Tanay is performing Hobby(Writing a programming language)",
        "Failed to perform hobby. HobbyException: Writing a programming language should fail!",
        "0",
        "1"
     ]
}
*/

thing Program
	setup
		Person p = Person("Yotam Tanay", 19)
		p.add_hobby("Piano")
		p.add_hobby("Running")
		p.add_hobby(Hobby("Writing a programming language", true))

        p.perform_hobbies()

        Console.print(p.hobbies[0].should_fail)
        p.hobbies[0].should_fail = true
        Console.print(p.hobbies[0].should_fail)

thing Location
	has text name


thing Hobby
    has text name
    has bool should_fail

	setup with text name, bool should_fail
        self.name = name
        self.should_fail = should_fail

    setup with text name
        self.name = name
        self.should_fail = false

	does perform
	    if self.should_fail
	        throw HobbyException(self.name + " should fail!")
	    Console.print("Successfully performed {}", [self.name])

    implicit as text
        return "Hobby(" + self.name + ")"

thing HobbyException
    has text reason

    setup with text reason
        self.reason = reason

    as text
        return "HobbyException: " + self.reason

thing Person
    # Each of the following is a member of the Person class

    has text name
    has number age
    has Location current_location
    has list<Hobby> hobbies       # Defines a list of Hobby instances
    has map<text, Person> friends # Defines a map of text -> Person

    # This constructor takes 2 arguments, and sets the members of the Person class
    setup with text name, number age
        self.name = name
        self.age = age
        self.current_location = Location() # Creates a new instance of the Location class
        self.hobbies = list<Hobby>()       # Creates a new, empty list
        self.friends = map<text, Person>() # Creates a new, empty map

    # This defines a method that take no arguments and returns nothing
    does say_hello
        Console.print("Hello from {}", [self.name])

    # This method takes no arguments and returns a boolean value
    does is_home returns bool
        return self.current_location.name eq "home"

    # This method takes one argument of type string
    does add_hobby with text hobby_name
        self.hobbies.append(Hobby(hobby_name)) # We construct a new hobby object from the text object

    # This method shares the same name as the one above, but takes different arguments (i.e. is overloaded)
    does add_hobby with Hobby hobby
        self.hobbies.append(hobby)

    does perform_hobbies
        for Hobby hobby in self.hobbies # A simple iteration loop
            Console.print("{} is performing {}", [self.name, hobby])
            try
                hobby.perform()
            handle HobbyException exc
                Console.print("Failed to perform hobby. {}", [exc as text])